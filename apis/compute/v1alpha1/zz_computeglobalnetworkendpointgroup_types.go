/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeGlobalNetworkEndpointGroupObservation struct {
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`
}

type ComputeGlobalNetworkEndpointGroupParameters struct {

	// The default port used if the port number is not specified in the
	// network endpoint.
	// +kubebuilder:validation:Optional
	DefaultPort *int64 `json:"defaultPort,omitempty" tf:"default_port,omitempty"`

	// An optional description of this resource. Provide this property when
	// you create the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name of the resource; provided by the client when the resource is
	// created. The name must be 1-63 characters long, and comply with
	// RFC1035. Specifically, the name must be 1-63 characters long and match
	// the regular expression '[a-z]([-a-z0-9]*[a-z0-9])?' which means the
	// first character must be a lowercase letter, and all following
	// characters must be a dash, lowercase letter, or digit, except the last
	// character, which cannot be a dash.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Type of network endpoints in this network endpoint group. Possible values: ["INTERNET_IP_PORT", "INTERNET_FQDN_PORT"]
	// +kubebuilder:validation:Required
	NetworkEndpointType *string `json:"networkEndpointType" tf:"network_endpoint_type,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`
}

// ComputeGlobalNetworkEndpointGroupSpec defines the desired state of ComputeGlobalNetworkEndpointGroup
type ComputeGlobalNetworkEndpointGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ComputeGlobalNetworkEndpointGroupParameters `json:"forProvider"`
}

// ComputeGlobalNetworkEndpointGroupStatus defines the observed state of ComputeGlobalNetworkEndpointGroup.
type ComputeGlobalNetworkEndpointGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ComputeGlobalNetworkEndpointGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeGlobalNetworkEndpointGroup is the Schema for the ComputeGlobalNetworkEndpointGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfgcp}
type ComputeGlobalNetworkEndpointGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ComputeGlobalNetworkEndpointGroupSpec   `json:"spec"`
	Status            ComputeGlobalNetworkEndpointGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeGlobalNetworkEndpointGroupList contains a list of ComputeGlobalNetworkEndpointGroups
type ComputeGlobalNetworkEndpointGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeGlobalNetworkEndpointGroup `json:"items"`
}

// Repository type metadata.
var (
	ComputeGlobalNetworkEndpointGroupKind             = "ComputeGlobalNetworkEndpointGroup"
	ComputeGlobalNetworkEndpointGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ComputeGlobalNetworkEndpointGroupKind}.String()
	ComputeGlobalNetworkEndpointGroupKindAPIVersion   = ComputeGlobalNetworkEndpointGroupKind + "." + GroupVersion.String()
	ComputeGlobalNetworkEndpointGroupGroupVersionKind = GroupVersion.WithKind(ComputeGlobalNetworkEndpointGroupKind)
)

func init() {
	SchemeBuilder.Register(&ComputeGlobalNetworkEndpointGroup{}, &ComputeGlobalNetworkEndpointGroupList{})
}
