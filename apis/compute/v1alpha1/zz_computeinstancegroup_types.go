/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeInstanceGroupObservation struct {
	SelfLink *string `json:"selfLink,omitempty" tf:"self_link,omitempty"`

	Size *int64 `json:"size,omitempty" tf:"size,omitempty"`
}

type ComputeInstanceGroupParameters struct {

	// An optional textual description of the instance group.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of instances in the group. They should be given as self_link URLs. When adding instances they must all be in the same network and zone as the instance group.
	// +kubebuilder:validation:Optional
	Instances []*string `json:"instances,omitempty" tf:"instances,omitempty"`

	// The name of the instance group. Must be 1-63 characters long and comply with RFC1035. Supported characters include lowercase letters, numbers, and hyphens.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The named port configuration.
	// +kubebuilder:validation:Optional
	NamedPort []NamedPortParameters `json:"namedPort,omitempty" tf:"named_port,omitempty"`

	// The URL of the network the instance group is in. If this is different from the network where the instances are in, the creation fails. Defaults to the network where the instances are in (if neither network nor instances is specified, this field will be blank).
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The ID of the project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The zone that this instance group should be created in.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type NamedPortObservation struct {
}

type NamedPortParameters struct {

	// The name which the port will be mapped to.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The port number to map the name to.
	// +kubebuilder:validation:Required
	Port *int64 `json:"port" tf:"port,omitempty"`
}

// ComputeInstanceGroupSpec defines the desired state of ComputeInstanceGroup
type ComputeInstanceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ComputeInstanceGroupParameters `json:"forProvider"`
}

// ComputeInstanceGroupStatus defines the observed state of ComputeInstanceGroup.
type ComputeInstanceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ComputeInstanceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeInstanceGroup is the Schema for the ComputeInstanceGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,tfgcp}
type ComputeInstanceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ComputeInstanceGroupSpec   `json:"spec"`
	Status            ComputeInstanceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeInstanceGroupList contains a list of ComputeInstanceGroups
type ComputeInstanceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeInstanceGroup `json:"items"`
}

// Repository type metadata.
var (
	ComputeInstanceGroupKind             = "ComputeInstanceGroup"
	ComputeInstanceGroupGroupKind        = schema.GroupKind{Group: Group, Kind: ComputeInstanceGroupKind}.String()
	ComputeInstanceGroupKindAPIVersion   = ComputeInstanceGroupKind + "." + GroupVersion.String()
	ComputeInstanceGroupGroupVersionKind = GroupVersion.WithKind(ComputeInstanceGroupKind)
)

func init() {
	SchemeBuilder.Register(&ComputeInstanceGroup{}, &ComputeInstanceGroupList{})
}
